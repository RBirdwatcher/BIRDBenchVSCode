/*
 * generated by Xtext 2.29.0
 */
package org.eclipse.efbt.regdna.dsl.formatting2;

import org.eclipse.efbt.regdna.dsl.regdna.ELAnnotation;
import org.eclipse.efbt.regdna.dsl.regdna.ELStringToStringMapEntry;
import org.eclipse.efbt.regdna.dsl.regdna.GenerationRulesModule;
import org.eclipse.efbt.regdna.dsl.regdna.Import;
import org.eclipse.efbt.regdna.dsl.regdna.RulesForReport;
import org.eclipse.xtext.formatting2.AbstractJavaFormatter;
import org.eclipse.xtext.formatting2.IFormattableDocument;

public class RegdnaFormatter extends AbstractJavaFormatter {

	protected void format(ELAnnotation eLAnnotation, IFormattableDocument doc) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ELStringToStringMapEntry eLStringToStringMapEntry : eLAnnotation.getDetails()) {
			doc.format(eLStringToStringMapEntry);
		}
	}

	protected void format(GenerationRulesModule generationRulesModule, IFormattableDocument doc) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Import _import : generationRulesModule.getImports()) {
			doc.format(_import);
		}
		for (RulesForReport rulesForReport : generationRulesModule.getRulesForReport()) {
			doc.format(rulesForReport);
		}
	}
	
	// TODO: implement for ELAttribute, ELClass, ELEnum, ELOperation, ELReference, ELEnumLiteral, ELPackage, RulesForReport, RulesForILTable, RuleForILTablePart, TableFilter, AndPredicate, OrPredicate, NotPredicate, ReportModule, Report, ReportCell
}
